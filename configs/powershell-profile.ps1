# Windows Terminal Setup - PowerShell Profile
# Generated by Install-WindowsTerminalSetup.ps1

# ============================================================================
# Oh-My-Posh Initialization
# ============================================================================
if (Get-Command oh-my-posh -ErrorAction SilentlyContinue) {
    # Initialize Oh-My-Posh with a theme
    $poshTheme = "$env:POSH_THEMES_PATH\paradox.omp.json"
    if (Test-Path $poshTheme) {
        oh-my-posh init pwsh --config $poshTheme | Invoke-Expression
    } else {
        # Fallback to built-in theme
        oh-my-posh init pwsh --config "$env:POSH_THEMES_PATH\atomic.omp.json" | Invoke-Expression
    }
}

# ============================================================================
# Zoxide Initialization (Smart cd)
# ============================================================================
if (Get-Command zoxide -ErrorAction SilentlyContinue) {
    Invoke-Expression (& { (zoxide init powershell | Out-String) })
}

# ============================================================================
# FNM Initialization (Node.js Version Manager)
# ============================================================================
if (Get-Command fnm -ErrorAction SilentlyContinue) {
    fnm env --use-on-cd | Out-String | Invoke-Expression
}

# ============================================================================
# PSReadLine Configuration
# ============================================================================
if (Get-Module -ListAvailable -Name PSReadLine) {
    Import-Module PSReadLine
    
    # Set editing mode
    Set-PSReadLineOption -EditMode Emacs
    
    # History settings
    Set-PSReadLineOption -HistorySearchCursorMovesToEnd
    Set-PSReadLineOption -MaximumHistoryCount 4000
    
    # Prediction settings (PowerShell 7.2+)
    if ($PSVersionTable.PSVersion.Major -ge 7 -and $PSVersionTable.PSVersion.Minor -ge 2) {
        Set-PSReadLineOption -PredictionSource History
        Set-PSReadLineOption -PredictionViewStyle ListView
    }
    
    # Key bindings
    Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward
    Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward
    Set-PSReadLineKeyHandler -Key Tab -Function Complete
    Set-PSReadLineKeyHandler -Key Ctrl+d -Function DeleteChar
}

# ============================================================================
# FZF Integration
# ============================================================================
if (Get-Command fzf -ErrorAction SilentlyContinue) {
    # Install PSFzf module if available
    if (Get-Module -ListAvailable -Name PSFzf) {
        Import-Module PSFzf
        
        # Set FZF key bindings
        Set-PsFzfOption -PSReadlineChordProvider 'Ctrl+f' -PSReadlineChordReverseHistory 'Ctrl+r'
        
        # Set FZF options
        $env:FZF_DEFAULT_OPTS = "--height 40% --layout=reverse --border --preview-window=right:60%"
    }
}

# ============================================================================
# Aliases
# ============================================================================

# Enhanced ls commands (eza)
if (Get-Command eza -ErrorAction SilentlyContinue) {
    Set-Alias -Name ls -Value eza -Option AllScope
    Set-Alias -Name ll -Value 'eza -la' -Option AllScope
    Set-Alias -Name la -Value 'eza -a' -Option AllScope
    Set-Alias -Name tree -Value 'eza --tree' -Option AllScope
    
    # Function for detailed listing
    function Get-DetailedListing { eza -la --git --header --group-directories-first $args }
    Set-Alias -Name lld -Value Get-DetailedListing -Option AllScope
}

# Enhanced cat command (bat)
if (Get-Command bat -ErrorAction SilentlyContinue) {
    Set-Alias -Name cat -Value bat -Option AllScope
}

# Git aliases
if (Get-Command git -ErrorAction SilentlyContinue) {
    Set-Alias -Name g -Value git -Option AllScope
    
    # Git functions
    function Get-GitStatus { git status $args }
    function Get-GitLog { git log --oneline --graph --decorate $args }
    function Get-GitBranches { git branch -a $args }
    
    Set-Alias -Name gs -Value Get-GitStatus -Option AllScope
    Set-Alias -Name gl -Value Get-GitLog -Option AllScope
    Set-Alias -Name gb -Value Get-GitBranches -Option AllScope
}

# Lazygit
if (Get-Command lazygit -ErrorAction SilentlyContinue) {
    Set-Alias -Name lg -Value lazygit -Option AllScope
}

# Neovim
if (Get-Command nvim -ErrorAction SilentlyContinue) {
    Set-Alias -Name vim -Value nvim -Option AllScope
    Set-Alias -Name vi -Value nvim -Option AllScope
}

# ============================================================================
# Utility Functions
# ============================================================================

function which {
    <#
    .SYNOPSIS
        Shows the path of a command (like Unix which)
    #>
    param([string]$Command)
    
    Get-Command -Name $Command -ErrorAction SilentlyContinue | 
        Select-Object -ExpandProperty Path
}

function touch {
    <#
    .SYNOPSIS
        Creates an empty file or updates timestamp (like Unix touch)
    #>
    param([string]$Path)
    
    if (Test-Path $Path) {
        (Get-Item $Path).LastWriteTime = Get-Date
    } else {
        "" | Out-File $Path -Encoding UTF8
    }
}

function mkcd {
    <#
    .SYNOPSIS
        Creates a directory and changes to it
    #>
    param([string]$Path)
    
    New-Item -ItemType Directory -Path $Path -Force | Out-Null
    Set-Location $Path
}

function Get-PublicIP {
    <#
    .SYNOPSIS
        Gets the public IP address
    #>
    try {
        (Invoke-RestMethod -Uri "https://api.ipify.org?format=json").ip
    } catch {
        Write-Warning "Could not retrieve public IP address"
    }
}

function Get-Weather {
    <#
    .SYNOPSIS
        Gets weather information for a location
    #>
    param([string]$Location = "")
    
    try {
        $uri = if ($Location) { "https://wttr.in/$Location" } else { "https://wttr.in/" }
        (Invoke-RestMethod -Uri $uri).Split("`n")[0..7] -join "`n"
    } catch {
        Write-Warning "Could not retrieve weather information"
    }
}

function Start-ElevatedSession {
    <#
    .SYNOPSIS
        Starts a new elevated PowerShell session
    #>
    if ($PSVersionTable.PSVersion.Major -ge 7) {
        Start-Process pwsh -Verb RunAs
    } else {
        Start-Process powershell -Verb RunAs
    }
}

function Update-Profile {
    <#
    .SYNOPSIS
        Reloads the PowerShell profile
    #>
    & $PROFILE
    Write-Host "Profile reloaded!" -ForegroundColor Green
}

function Edit-Profile {
    <#
    .SYNOPSIS
        Opens the PowerShell profile for editing
    #>
    if (Get-Command code -ErrorAction SilentlyContinue) {
        code $PROFILE
    } elseif (Get-Command notepad -ErrorAction SilentlyContinue) {
        notepad $PROFILE
    } else {
        Write-Warning "No suitable editor found. Profile location: $PROFILE"
    }
}

function Get-SystemInfo {
    <#
    .SYNOPSIS
        Displays system information
    #>
    $os = Get-CimInstance -ClassName Win32_OperatingSystem
    $computer = Get-CimInstance -ClassName Win32_ComputerSystem
    $processor = Get-CimInstance -ClassName Win32_Processor | Select-Object -First 1
    
    [PSCustomObject]@{
        ComputerName = $computer.Name
        OS = $os.Caption
        Version = $os.Version
        Architecture = $os.OSArchitecture
        TotalMemory = "{0:N2} GB" -f ($computer.TotalPhysicalMemory / 1GB)
        Processor = $processor.Name
        PowerShell = $PSVersionTable.PSVersion
        Uptime = (Get-Date) - $os.LastBootUpTime
    }
}

# ============================================================================
# Environment Variables
# ============================================================================

# Set default editor
if (Get-Command code -ErrorAction SilentlyContinue) {
    $env:EDITOR = "code"
} elseif (Get-Command nvim -ErrorAction SilentlyContinue) {
    $env:EDITOR = "nvim"
}

# FZF default options
if (Get-Command fzf -ErrorAction SilentlyContinue) {
    $env:FZF_DEFAULT_OPTS = "--height 40% --layout=reverse --border"
    
    # Use fd for file searching if available
    if (Get-Command fd -ErrorAction SilentlyContinue) {
        $env:FZF_DEFAULT_COMMAND = "fd --type f --hidden --follow --exclude .git"
    }
}

# ============================================================================
# Welcome Message
# ============================================================================

# Display welcome message on profile load
Write-Host ""
Write-Host "ðŸš€ Windows Terminal Setup Profile Loaded" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan

# Show PowerShell version
Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)" -ForegroundColor Green

# Show available tools
$tools = @()
if (Get-Command oh-my-posh -ErrorAction SilentlyContinue) { $tools += "oh-my-posh" }
if (Get-Command git -ErrorAction SilentlyContinue) { $tools += "git" }
if (Get-Command eza -ErrorAction SilentlyContinue) { $tools += "eza" }
if (Get-Command bat -ErrorAction SilentlyContinue) { $tools += "bat" }
if (Get-Command fzf -ErrorAction SilentlyContinue) { $tools += "fzf" }
if (Get-Command zoxide -ErrorAction SilentlyContinue) { $tools += "zoxide" }
if (Get-Command fnm -ErrorAction SilentlyContinue) { $tools += "fnm" }
if (Get-Command lazygit -ErrorAction SilentlyContinue) { $tools += "lazygit" }

if ($tools.Count -gt 0) {
    Write-Host "Available tools: $($tools -join ', ')" -ForegroundColor Yellow
}

Write-Host ""

# ============================================================================
# Module Auto-Loading
# ============================================================================

# Auto-import commonly used modules
$autoImportModules = @('PSReadLine')

foreach ($module in $autoImportModules) {
    if (Get-Module -ListAvailable -Name $module) {
        try {
            Import-Module $module -ErrorAction SilentlyContinue
        } catch {
            # Silently continue if module import fails
        }
    }
}
